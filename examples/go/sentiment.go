// Code generated by protoc-gen-go. DO NOT EDIT.
// source: sentiment.proto

package main

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type SentimentRequest struct {
	Text                 string   `protobuf:"bytes,1,opt,name=text" json:"text,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SentimentRequest) Reset()         { *m = SentimentRequest{} }
func (m *SentimentRequest) String() string { return proto.CompactTextString(m) }
func (*SentimentRequest) ProtoMessage()    {}
func (*SentimentRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_sentiment_ebdd04c12d9b97f7, []int{0}
}
func (m *SentimentRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SentimentRequest.Unmarshal(m, b)
}
func (m *SentimentRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SentimentRequest.Marshal(b, m, deterministic)
}
func (dst *SentimentRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SentimentRequest.Merge(dst, src)
}
func (m *SentimentRequest) XXX_Size() int {
	return xxx_messageInfo_SentimentRequest.Size(m)
}
func (m *SentimentRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SentimentRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SentimentRequest proto.InternalMessageInfo

func (m *SentimentRequest) GetText() string {
	if m != nil {
		return m.Text
	}
	return ""
}

type SentimentReply struct {
	Positive             float32  `protobuf:"fixed32,1,opt,name=positive" json:"positive,omitempty"`
	Negative             float32  `protobuf:"fixed32,2,opt,name=negative" json:"negative,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SentimentReply) Reset()         { *m = SentimentReply{} }
func (m *SentimentReply) String() string { return proto.CompactTextString(m) }
func (*SentimentReply) ProtoMessage()    {}
func (*SentimentReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_sentiment_ebdd04c12d9b97f7, []int{1}
}
func (m *SentimentReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SentimentReply.Unmarshal(m, b)
}
func (m *SentimentReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SentimentReply.Marshal(b, m, deterministic)
}
func (dst *SentimentReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SentimentReply.Merge(dst, src)
}
func (m *SentimentReply) XXX_Size() int {
	return xxx_messageInfo_SentimentReply.Size(m)
}
func (m *SentimentReply) XXX_DiscardUnknown() {
	xxx_messageInfo_SentimentReply.DiscardUnknown(m)
}

var xxx_messageInfo_SentimentReply proto.InternalMessageInfo

func (m *SentimentReply) GetPositive() float32 {
	if m != nil {
		return m.Positive
	}
	return 0
}

func (m *SentimentReply) GetNegative() float32 {
	if m != nil {
		return m.Negative
	}
	return 0
}

func init() {
	proto.RegisterType((*SentimentRequest)(nil), "sentiment.SentimentRequest")
	proto.RegisterType((*SentimentReply)(nil), "sentiment.SentimentReply")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// SentimentClient is the client API for Sentiment service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type SentimentClient interface {
	Analyze(ctx context.Context, in *SentimentRequest, opts ...grpc.CallOption) (*SentimentReply, error)
	AnalyzeStream(ctx context.Context, opts ...grpc.CallOption) (Sentiment_AnalyzeStreamClient, error)
}

type sentimentClient struct {
	cc *grpc.ClientConn
}

func NewSentimentClient(cc *grpc.ClientConn) SentimentClient {
	return &sentimentClient{cc}
}

func (c *sentimentClient) Analyze(ctx context.Context, in *SentimentRequest, opts ...grpc.CallOption) (*SentimentReply, error) {
	out := new(SentimentReply)
	err := c.cc.Invoke(ctx, "/sentiment.Sentiment/Analyze", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sentimentClient) AnalyzeStream(ctx context.Context, opts ...grpc.CallOption) (Sentiment_AnalyzeStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Sentiment_serviceDesc.Streams[0], "/sentiment.Sentiment/AnalyzeStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &sentimentAnalyzeStreamClient{stream}
	return x, nil
}

type Sentiment_AnalyzeStreamClient interface {
	Send(*SentimentRequest) error
	Recv() (*SentimentReply, error)
	grpc.ClientStream
}

type sentimentAnalyzeStreamClient struct {
	grpc.ClientStream
}

func (x *sentimentAnalyzeStreamClient) Send(m *SentimentRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *sentimentAnalyzeStreamClient) Recv() (*SentimentReply, error) {
	m := new(SentimentReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// SentimentServer is the server API for Sentiment service.
type SentimentServer interface {
	Analyze(context.Context, *SentimentRequest) (*SentimentReply, error)
	AnalyzeStream(Sentiment_AnalyzeStreamServer) error
}

func RegisterSentimentServer(s *grpc.Server, srv SentimentServer) {
	s.RegisterService(&_Sentiment_serviceDesc, srv)
}

func _Sentiment_Analyze_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SentimentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SentimentServer).Analyze(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sentiment.Sentiment/Analyze",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SentimentServer).Analyze(ctx, req.(*SentimentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Sentiment_AnalyzeStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(SentimentServer).AnalyzeStream(&sentimentAnalyzeStreamServer{stream})
}

type Sentiment_AnalyzeStreamServer interface {
	Send(*SentimentReply) error
	Recv() (*SentimentRequest, error)
	grpc.ServerStream
}

type sentimentAnalyzeStreamServer struct {
	grpc.ServerStream
}

func (x *sentimentAnalyzeStreamServer) Send(m *SentimentReply) error {
	return x.ServerStream.SendMsg(m)
}

func (x *sentimentAnalyzeStreamServer) Recv() (*SentimentRequest, error) {
	m := new(SentimentRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _Sentiment_serviceDesc = grpc.ServiceDesc{
	ServiceName: "sentiment.Sentiment",
	HandlerType: (*SentimentServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Analyze",
			Handler:    _Sentiment_Analyze_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "AnalyzeStream",
			Handler:       _Sentiment_AnalyzeStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "sentiment.proto",
}

func init() { proto.RegisterFile("sentiment.proto", fileDescriptor_sentiment_ebdd04c12d9b97f7) }

var fileDescriptor_sentiment_ebdd04c12d9b97f7 = []byte{
	// 174 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x2f, 0x4e, 0xcd, 0x2b,
	0xc9, 0xcc, 0x4d, 0xcd, 0x2b, 0xd1, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2, 0x84, 0x0b, 0x28,
	0xa9, 0x71, 0x09, 0x04, 0xc3, 0x38, 0x41, 0xa9, 0x85, 0xa5, 0xa9, 0xc5, 0x25, 0x42, 0x42, 0x5c,
	0x2c, 0x25, 0xa9, 0x15, 0x25, 0x12, 0x8c, 0x0a, 0x8c, 0x1a, 0x9c, 0x41, 0x60, 0xb6, 0x92, 0x07,
	0x17, 0x1f, 0x92, 0xba, 0x82, 0x9c, 0x4a, 0x21, 0x29, 0x2e, 0x8e, 0x82, 0xfc, 0xe2, 0xcc, 0x92,
	0xcc, 0xb2, 0x54, 0xb0, 0x4a, 0xa6, 0x20, 0x38, 0x1f, 0x24, 0x97, 0x97, 0x9a, 0x9e, 0x08, 0x96,
	0x63, 0x82, 0xc8, 0xc1, 0xf8, 0x46, 0xf3, 0x19, 0xb9, 0x38, 0xe1, 0x46, 0x09, 0x39, 0x73, 0xb1,
	0x3b, 0xe6, 0x25, 0xe6, 0x54, 0x56, 0xa5, 0x0a, 0x49, 0xeb, 0x21, 0xdc, 0x89, 0xee, 0x26, 0x29,
	0x49, 0xec, 0x92, 0x05, 0x39, 0x95, 0x4a, 0x0c, 0x42, 0xbe, 0x5c, 0xbc, 0x50, 0x43, 0x82, 0x4b,
	0x8a, 0x52, 0x13, 0x73, 0xc9, 0x37, 0x4a, 0x83, 0xd1, 0x80, 0x31, 0x89, 0x0d, 0x1c, 0x4a, 0xc6,
	0x80, 0x00, 0x00, 0x00, 0xff, 0xff, 0xa5, 0xb0, 0x19, 0x1f, 0x38, 0x01, 0x00, 0x00,
}
